generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id             String           @id @default(cuid()) @map("_id")
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  courses        Course[]
  courseProgress CourseProgress[]
  accounts       Account[]
  sessions       Session[]
}

// course contains many units
model Course {
  id            String @id @default(cuid()) @map("_id")
  name          String
  image         String
  totalChapters Int
  units         Unit[]
  authorId      String
  author        User   @relation(fields: [authorId], references: [id])
}

// unit contains many chapters
model Unit {
  id       String @id @default(cuid()) @map("_id")
  courseId String

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id                 String     @id @default(cuid()) @map("_id")
  unitId             String
  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?
  unit               Unit       @relation(fields: [unitId], references: [id])
  questions          Question[]

  @@index([unitId], name: "unitId")
}

model CourseProgress {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  courseId  String
  chapters  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
}

model Question {
  id        String @id @default(cuid()) @map("_id")
  chapterId String

  question String
  answer   String
  options  String
  chapter  Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}
